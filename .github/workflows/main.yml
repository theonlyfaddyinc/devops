name: "Pipeline Workflow Setup"

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_call:
    inputs:
      sample_input:
        required: true
        type: string

  workflow_dispatch:

jobs:
  job1:
    name: Job 1
    outputs:
      files_list: ${{ steps.files_copy_step.outputs.files_list }}
      workflow_source_path: ${{ steps.files_copy_step.outputs.workflow_source_path }}
      workflow_dest_path: ${{ steps.files_copy_step.outputs.workflow_dest_path }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout current repo!
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.WORKFLOW_TOKEN }}
      - name: Checkout devops repo under ./devops
        uses: actions/checkout@v3
        with:
          repository: theonlyfaddyinc/devops
          path: ./devops
          token: ${{ secrets.WORKFLOW_TOKEN }}
      - name: Copy *_pipeline.yml workflows from devops repo to ${{ github.repository }} repo.
        id: files_copy_step
        # shell: python
        # run: |
        #       import os,re,shutil
        #       workflow_source_path = 'devops/.github/workflows/'
        #       workflow_dest_path = '.github/workflows/'
        #       files =  [file for file in os.listdir(workflow_source_path) if re.match(r'(.)+_pipeline.yml', file)]
        #       print(f"Files : {files}")
        #       for file in files:
        #         shutil.copy(workflow_source_path + file,workflow_dest_path + file)
        #         print(f"File copied from <{workflow_source_path + file}> to <workflow_dest_path + file>")
        #       files_list = "|".join(files)
        #       print(f"Files List = {files_list}")

        #       with open(os.getenv('GITHUB_OUTPUT'), "a") as output:
        #               output.write(f"files_list={files_list}\n")
        shell: sh
        run: |
              workflow_source_path="$GITHUB_WORKSPACE/devops/.github/workflows/"
              workflow_dest_path="$GITHUB_WORKSPACE/.github/workflows/"
              pipeline_file_filter='*_pipeline.yml'
              
              
              
              echo "Change directory to '$workflow_source_path'"
              cd $workflow_source_path

              for file in $pipeline_file_filter;
              do
                  echo "Copying '$file' to  '$workflow_dest_path'"
                  #file=$(cat $file_abs | sed -e "s/$workflow_source_path//")
                  #echo "Converted '$file' to '$file'"
                  cp $workflow_source_path$file $workflow_dest_path$file
                  if [ -z "$var" ]
                  then
                        file_list=$file
                  else
                        file_list=$file_list' '$file
                  fi
                  echo "files_list=$file_list\n" >> $GITHUB_OUTPUT
                  echo "workflow_source_path=$workflow_source_path\n" >> $GITHUB_OUTPUT
                  echo "workflow_dest_path=$workflow_dest_path\n" >> $GITHUB_OUTPUT
              done;
              echo $file_list
      - name: Git add files & commit
        shell: sh
        run: |
          echo "- Initializin Git Config!"
          git config --global user.name 'GHA_AUTO_AGENT'
          git config --global user.email 'GHA_AUTO_AGENT@gmail.com'
          git status
          # echo "workflow_source_path : ${{ steps.files_copy_step.outputs.workflow_source_path }}"
          # echo "workflow_dest_path : ${{ steps.files_copy_step.outputs.workflow_dest_path }}"
          # workflow_source_path="${{ steps.files_copy_step.outputs.workflow_source_path }}"
          workflow_dest_path="${{ steps.files_copy_step.outputs.workflow_dest_path }}"
          
          echo "Files list : ${{ steps.files_copy_step.outputs.files_list }}"
          for file in "${{ steps.files_copy_step.outputs.files_list }}";
          do
            echo "File = $file"
            git add $workflow_dest_path$file
          done;
          echo "- Files staged for the commit:"
          git diff --name-only --cached
          echo "- Performing commit. Incld '[skip actions]' in message to skip cyclic action trigger."
          git commit -am "GHA_AUTO_AGENT : Pipeline Initialization [skip actions]"
          echo "- Pushing to repo"
          # git push

  job2:
    needs: job1
    name: Job 2
    runs-on: ubuntu-latest
    steps:
      - name: Run a simple step
        run: echo "Run a simple step"
